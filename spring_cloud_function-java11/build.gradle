import com.github.jengelman.gradle.plugins.shadow.transformers.*

plugins {
    id("java")
    id("application")
    id("org.springframework.boot") version("2.4.1")
    id("io.spring.dependency-management") version("1.0.10.RELEASE")
    id("com.github.johnrengelman.shadow") version("6.1.0")
    id("com.dorongold.task-tree") version("1.5")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    set("springCloudVersion", "2020.0.0")
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
}

dependencies {
    /* Lombok */
    def lombokVersion = "1.18.16"
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    /* DynamoDB */
    def dynamoDbVersion = "2.15.61"
    implementation("software.amazon.awssdk:dynamodb:${dynamoDbVersion}")
    implementation("software.amazon.awssdk:url-connection-client:${dynamoDbVersion}")

    /* Lambda */
    def lambdaVersion = "1.2.1"
    implementation("com.amazonaws:aws-lambda-java-core:${lambdaVersion}")
    implementation("com.amazonaws:aws-lambda-java-events:3.7.0");

    /* Spring Boot + Cloud Function */
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.cloud:spring-cloud-starter")
    implementation("org.springframework.cloud:spring-cloud-function-adapter-aws")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

test {
    useJUnitPlatform()
    testLogging {
        events = ['FAILED', 'PASSED', 'SKIPPED', 'STANDARD_OUT']
    }
}

mainClassName = "demo.albertattard.uniquecode.DemoApplication"

shadowJar {
    dependencies {
        exclude(dependency("org.springframework.cloud:spring-cloud-function-web:${springCloudVersion}"))
    }
    mergeServiceFiles()
    append 'META-INF/spring.handlers'
    append 'META-INF/spring.schemas'
    append 'META-INF/spring.tooling'
    transform(PropertiesFileTransformer) {
        paths = ['META-INF/spring.factories']
        mergeStrategy = "append"
    }
}
