plugins {
    id("java")
    id("com.github.johnrengelman.shadow") version("6.1.0")
    id("com.dorongold.task-tree") version("1.5")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "http://dynamodb-local.s3-website-us-west-2.amazonaws.com/release"
    }
}

configurations {
    developmentOnly
    dynamodb
}

dependencies {
    /* Lombok */
    def lombokVersion = "1.18.16"
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    /* Random String Generator */
    def apacheCommonsVersion = "3.11"
    implementation("org.apache.commons:commons-lang3:${apacheCommonsVersion}")

    /* DynamoDB */
    def dynamoDbVersion = "2.15.61"
    def dynamoDbLocalVersion = "1.13.5"
    implementation("software.amazon.awssdk:dynamodb:${dynamoDbVersion}")
    testImplementation("com.amazonaws:DynamoDBLocal:${dynamoDbLocalVersion}")
    dynamodb(fileTree(dir: "lib", include: ["*.dylib", "*.so", "*.dll"]))
    dynamodb("com.amazonaws:DynamoDBLocal:${dynamoDbLocalVersion}")

    /* Micronaut Framework */
    def micronautVersion = "2.2.3"
    annotationProcessor(platform("io.micronaut:micronaut-bom:${micronautVersion}"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    implementation(platform("io.micronaut:micronaut-bom:${micronautVersion}"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut.aws:micronaut-function-aws-api-proxy")
    implementation("io.micronaut.aws:micronaut-aws-sdk-v2")
    runtimeOnly("ch.qos.logback:logback-classic")
    testAnnotationProcessor(enforcedPlatform("io.micronaut:micronaut-bom:${micronautVersion}"))
    testAnnotationProcessor("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:${micronautVersion}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    /* Testing */
    def assertJVersion = "3.18.1"
    testImplementation("org.assertj:assertj-core:${assertJVersion}")
}

task copyNativeDeps(type: Copy) {
    from(configurations.dynamodb)
    into("$project.buildDir/libs")
}

test {
    classpath += configurations.developmentOnly
    useJUnitPlatform()
    dependsOn copyNativeDeps
    doFirst {
        systemProperty "java.library.path", "build/libs"
    }
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            "-parameters",
            // enables incremental compilation
            "-Amicronaut.processing.incremental=true",
            "-Amicronaut.processing.annotations=demo.albertattard.uniquecode.*",
            "-Amicronaut.processing.group=${project.group}",
            "-Amicronaut.processing.module=${project.name}",
    ])
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs("-XX:TieredStopAtLevel=1", "-Dcom.sun.management.jmxremote")
    if (gradle.startParameter.continuous) {
        systemProperties(
                "micronaut.io.watch.restart": "true",
                "micronaut.io.watch.enabled": "true",
                "micronaut.io.watch.paths": "src/main"
        )
    }
}
